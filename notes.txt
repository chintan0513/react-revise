Types of Events: 

button ------- Event -------- function
        listening    Trigger

hooks: are functions that let you hook into React state and lifecycle features from components. (manage state)

benefits of hooks: readability and simplicity

states: easily chnage the behaviour in order to suita given need. || data in component that determines behaviour

useState = enable use of components for controlling state

state management = 

lifting a state to up and pop drilling


 * STATE MANAGEMENT * is through passing props is like taking a bus and going to each stop.
 * CONTEXT API* is teleporting to the destination instantly. 
        -> context provider [stores the state] and context consumer [will use the state]

        -> dispatch that accepts the object literal 

* props are immutable, we can't change the value of it. However, we can change the value of state.

* ASSETS *
        - Sometimes, you can combine client-side rendering and server-side rendering. This approach results in whatâ€™s referred to as isomorphic apps.
        - In development mode, webpack bundles your files and optimizes your bundles for updates - so that any updates to any of the files in your locally developed app are quickly re-bundled. It also builds source maps so you can inspect the original file included in the bundled code.
        - In production mode, webpack bundles your files so that they are optimized for speed. This means the files are minified and organized to take up the least amount of memory. So, they are optimized for speed because these bundles are fast to download when a user visits the website online.

 -> images can be load through the import statement, require and external links.

* VIDEOS & AUDIO* (2 WAYS TO ADD it in the REACT project)
        -> video element
        -> embedded third-party VIDEOS
        -> third-party npm packages (react-player)


// advance react 

-> map method :- 
        
        list represents the data in the form of array.
        -> keys: are identifiers that help React identify which items have changed, are added, or are removed.
        - instruct how to treat specific element when an update occurs.
        - USE unique ID from your data when possible.

-> controlled components: are set of components that offer a declarative API to enable full control of  state of form 
                          element at any given time.
        -> value : a special property to determine input value
        - prevent HTML default behaviour than e.preventDefault() method is used.

-> Uncontrolled inputs are like standard HTML form inputs. 

Props and state are different. Props are passed to the components, when state is managed within the components.
However, both are plain JS objects and deterministic.(same output for the same combinations)

Props are just properties, component configurations and immutable.
when state starts with default value, a snapshot, state is private

// props drilling method : passing data through all component tree levels (even those components that don't need it)
 at that time context help us.

-> Context API: 
        - alternative ways to pass the data through the component tree without habing the props down manually at lower level.

** HOOKS **     
        -> useState -> used in React which works with state in components
        -> array data structure as return value

-> side effects make a function impure. however, pure functions have no side effect (same output)
                                 B U T 
        to avoid the side effect of a function which make it impure, we have useEffect hook.

-> rules of hooks 
        -> only call hooks from a react component functions
        -> call hooks at the top level of react component
        -> call multiple state/ effect hooks
        -> make multiple hook call in the same sequence 
        
-> Fetch is used to make a server requests to retrieve data on JSON format.
        - single-threaded execution means that not further process can start before the current one is finished.
        [Asyncronous] 
        
        * API *  is application programming interface that allows two applications to talk to each other.
                1 - type Safety is a way to insure that fetching something from the back-end, the result is similar as expected.
                2 - API key is a unique identifier that allows you to access the API.

-> useReducer -> it has a initial state and reducer function 
